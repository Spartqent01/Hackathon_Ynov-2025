// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  user_id String @id 
  name String
  username String 
  email     String     @unique
  password  String
  role      UserRole   @default(USER)
  createdAt DateTime   @default(now())
  teams    TeamMember[]
  comments Comment[]
}

enum UserRole {
  ADMIN
  USER
}

model Game {
  id String @id
  date DateTime
  location String
  duration Int 
  referee String
  season String
  rating Int
  score Score?
  teams GameTeam[]
  comments Comment[]
  tournamentId Int?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])

}

model Tournament {
  id Int @id @default(autoincrement())
  name String
  date DateTime
  team_max Int
  games Game[] 
  }

model Team {
  id Int @id @default(autoincrement())
  players TeamMember[]
  games   GameTeam[]
  team_color TeamColor
}

model TeamMember {
  id        Int       @id @default(autoincrement())
  userId    String
  teamId    Int
  role      PlayerRole
  user      User @relation(fields: [userId], references: [user_id])
  team      Team @relation(fields: [teamId], references: [id])
}

enum TeamColor{
  RED
  BLUE
}

enum PlayerRole {
  DEFENSE
  ATTACK
}

model GameTeam {
  id      Int   @id @default(autoincrement())
  gameId  String
  teamId  Int

  game Game @relation(fields: [gameId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([gameId, teamId]) // prevents duplicate associations
}

model Score {
  id         Int       @id @default(autoincrement())
  gameId     String       @unique
  red_score  Int
  blue_score Int
  winner     TeamColor
  game       Game      @relation(fields: [gameId], references: [id])
}

model Comment{
  id             Int    @id @default(autoincrement())
  gameId         String
  userId         String
  player_comment String
  game           Game @relation(fields: [gameId], references: [id])
  user           User @relation(fields: [userId], references: [user_id])
}
